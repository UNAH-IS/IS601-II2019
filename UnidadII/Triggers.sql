DROP TABLE TMP;

CREATE TABLE LOG_TRIGGER(
  FECHA DATE,
  MENSAJE VARCHAR2(4000)
);


CREATE OR REPLACE TRIGGER TRG_EMPLEADOS
  BEFORE DELETE ON EMPLOYEES
DECLARE
BEGIN
    INSERT INTO LOG_TRIGGER(FECHA, MENSAJE)
    VALUES(SYSDATE, 'ANTES DE ELIMINAR UN REGISTRO');

    EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR');
    INSERT INTO LOG_TRIGGER(FECHA, MENSAJE)
    VALUES(SYSDATE, 'FALLO EL TRIGGER');

end;


SELECT *
FROM EMPLOYEES;

SELECT *
FROM LOG_TRIGGER;


DELETE FROM EMPLOYEES
WHERE EMPLOYEE_ID = 122;


COMMIT;
DELETE FROM JOB_HISTORY
WHERE EMPLOYEE_ID = 122;

UPDATE DEPARTMENTS
SET MANAGER_ID = NULL
WHERE MANAGER_ID = 122;

UPDATE EMPLOYEES
SET MANAGER_ID=NULL
WHERE MANAGER_ID = 122;

select *
from JOB_HISTORY
WHERE EMPLOYEE_ID = 101;

SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 101;

SELECT *
FROM JOBS;

CREATE OR REPLACE TRIGGER TRG_UPDATE_JOB
  BEFORE UPDATE OF JOB_ID ON EMPLOYEES
  FOR EACH ROW
DECLARE
BEGIN
  INSERT INTO JOB_HISTORY(
          EMPLOYEE_ID,
          START_DATE,
          END_DATE,
          JOB_ID,
          DEPARTMENT_ID
  ) VALUES (
         :OLD.EMPLOYEE_ID,
          SYSDATE,
          SYSDATE,
          :OLD.JOB_ID,
          :OLD.DEPARTMENT_ID
  );
  INSERT INTO LOG_TRIGGER(FECHA, MENSAJE)
    VALUES(SYSDATE, 'SE INSERTO EN LA TABLA DE JOB_HISTORY');
  EXCEPTION
  WHEN OTHERS THEN
    INSERT INTO LOG_TRIGGER(FECHA, MENSAJE)
    VALUES(SYSDATE, 'FALLO EL TRIGGER DE ACTUALIZACION DE JOB_ID');
END;



:OLD
:NEW


vicepresidenta -> :OLD
programadora   -> :NEW


UPDATE EMPLOYEES
SET JOB_ID = 'IT_PROG'
WHERE EMPLOYEE_ID =101;